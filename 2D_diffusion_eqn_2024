# =============================================================================
# Enhanced Visualization for the 2D Diffusion Equation
# =============================================================================

# Required Modules
import numpy as np
from matplotlib import pyplot as plt
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D 

nx = 100                                        # number of x grid-points
ny = 100                                        # number of y grid-points
nt = 1000                                  # number of time steps
nu = 0.5                                        # diffusivity term (m2/s)
xl = 2                                          # x-length
yl = 2                                          # y-length
dx = xl/(nx - 1)                                # x stepsize
dy = yl/(ny - 1)                                # y stepsize
sigma = .25                                     # numerical stability parameter
dt = sigma*dx*dy/nu                             # time stepsize 
T0 = 2                                          # high value/hot temp
Tw = 1                                          # low value/cool temp

# grid formation
x = np.linspace(0, xl, nx)
y = np.linspace(0, yl, ny)
X, Y = np.meshgrid(x, y)

# array initialization
u = np.ones((ny, nx))  
un = np.ones((ny, nx))
u[-1, :] = T0                                  # Changes the value in the X direction along the wall
u[:, 0] = T0                                   # Changes the value in the Y direction along the wall

# Initial Condition Plot (3D) with Improved Color and Features
fig1 = plt.figure(figsize=(8, 6))
ax1 = fig1.add_subplot(111, projection='3d')
surf = ax1.plot_surface(X, Y, u, rstride=1, cstride=1, cmap='inferno',
                        edgecolor='none', antialiased=True)
ax1.set_title('Initial Temperature Distribution (3D)', fontsize=14)
ax1.set_xlabel('$x$', fontsize=12)
ax1.set_ylabel('$y$', fontsize=12)
ax1.set_zlabel('$Temperature$', fontsize=12)
ax1.set_zlim(1, 2.5)
fig1.colorbar(surf, ax=ax1, shrink=0.5, aspect=5, label='Temperature')

# Initial Condition Plot (2D)
fig2 = plt.figure(figsize=(6, 6), dpi=100)
ax2 = fig2.add_subplot(111)
disp = ax2.imshow(u, cmap='inferno', origin='lower', extent=[0, xl, 0, yl])
ax2.set_title('Initial Temperature Distribution (2D)', fontsize=14)
ax2.set_xlabel('$x$', fontsize=12)
ax2.set_ylabel('$y$', fontsize=12)
fig2.colorbar(disp, ax=ax2, label='Temperature')

# main function loop (vectorized CDS)
def diffuse(nt):
    u[-1, :] = T0
    # u[:, 0] = T0
    for n in range(nt + 1):
        un = u.copy()
        u[1:-1, 1:-1] = (un[1:-1, 1:-1] +
                        nu * dt / dx**2 *
                        (un[1:-1, 2:] - 2 * un[1:-1, 1:-1] + un[1:-1, 0:-2]) +
                        nu * dt / dy**2 *
                        (un[2:, 1: -1] - 2 * un[1:-1, 1:-1] + un[0:-2, 1:-1]))
        # Dirichlet BCs
        u[0, :] = Tw
        u[-1, :] = T0
        u[:, 0] = T0
        u[:, -1] = Tw

# Call the diffuse function with the desired number of time steps
diffuse(nt)

# Final Solution Plot (3D)
fig3 = plt.figure(figsize=(8, 6))
ax3 = fig3.add_subplot(111, projection='3d')
surf2 = ax3.plot_surface(X, Y, u, rstride=1, cstride=1, cmap='plasma',
                         edgecolor='none', antialiased=True)
ax3.set_title('Final Temperature Distribution (3D)', fontsize=14)
ax3.set_xlabel('$x$', fontsize=12)
ax3.set_ylabel('$y$', fontsize=12)
ax3.set_zlabel('$Temperature$', fontsize=12)
ax3.set_zlim(1, 2.5)
fig3.colorbar(surf2, ax=ax3, shrink=0.5, aspect=5, label='Temperature')

# Final Solution Plot (2D)
fig4 = plt.figure(figsize=(6, 6), dpi=100)
ax4 = fig4.add_subplot(111)
disp2 = ax4.imshow(u, cmap='plasma', origin='lower', extent=[0, xl, 0, yl])
ax4.set_title('Final Temperature Distribution (2D)', fontsize=14)
ax4.set_xlabel('$x$', fontsize=12)
ax4.set_ylabel('$y$', fontsize=12)
fig4.colorbar(disp2, ax=ax4, label='Temperature')

plt.show()  # Display the final plots
